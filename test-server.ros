#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.gcp-sbcl-woo.3799527630
  (:use :cl))
(in-package :ros.script.gcp-sbcl-woo.3799527630)

(setf sb-impl::*default-external-format* :utf-8)
(setf sb-alien::*default-c-string-external-format* :utf-8)

(push #P"~/.asdf/" asdf:*central-registry*)

;; (ql:quickload :woo)
;; (ql:quickload :clack)
;; (ql:quickload :test.server)
;; (ql:quickload :cl-base64)
;; (ql:quickload :split-sequence)

(defvar *svr* nil)

(defvar *mw*
  (lambda (app)
    (lambda (env)
      '(200 (:content-type "text/plain")
        ("Test!")))))

(defun basic-auth (user pass)
  (and (string= user "hoge")
       (string= pass "fuga")))

(defun return-401 (realm)
  `(401
    (:content-type "text/plain"
     :content-length 22
     :www-authenticate ,(format nil "Basic realm=~A" realm))
    ("Authorization required")))

(defun parse-authorization-header (authorization)
  (when (string= authorization "Basic " :end1 6)
    (let ((user-and-pass (cl-base64:base64-string-to-string (subseq authorization 6))))
      (split-sequence:split-sequence #\: user-and-pass))))

(defvar *yy*
  (lambda (app)
    (lambda (env)
      (block nil
        (let ((realm "restricted area")
              (authorization (gethash "authorization" (getf env :headers))))
          (unless authorization
            (return (return-401 realm)))
          (destructuring-bind (user &optional (pass ""))
              (parse-authorization-header authorization)
            (if user
                (multiple-value-bind (result returned-user)
                    (funcall #'basic-auth user pass)
                  (if result
                      (progn
                        (setf (getf env :remote-user)
                              (or returned-user user))
                        (funcall app env))
                      (return-401 realm)))
                (return-401 realm))))))))

(defun build ()
  (lack:builder (:static :path "/files/" :root #P"/home/appl-user/prj/test-server/files/")
                ;; *mw*
                *yy*
                (lambda (env)
                  (declare (ignore env))
                  '(200 (:content-type "text/plain")
                    ("Test!")))))


(defun start ()
  (setf *svr*
        (clack:clackup (build)
                       :server  :woo ;; :hunchentoot
                       :port    (parse-integer (or (uiop:getenv "PORT") "8080"))
                       :address "0.0.0.0")))

(defun gc-loop ()
  (do ((counter 0 (1+ counter))
       (gc-point 88888888))
      (test.server:*balus* (clack:stop *svr*))
    (sleep 1)
    (when (= counter gc-point)
      (setf counter 0)
      (sb-ext:gc))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (start)
  (gc-loop))

;;; vim: set ft=lisp lisp:
